{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["THREE","require","THREEAR","App","scene","Scene","camera","PerspectiveCamera","window","innerWidth","innerHeight","position","z","renderer","WebGLRenderer","alpha","setClearColor","Color","setSize","domElement","style","top","left","document","body","appendChild","markerGroup","Group","add","source","Source","initialize","then","controller","model","light","AmbientLight","GLTFLoader","load","gltf","children","x","patternMarker","PatternMarker","patternUrl","markerObject","trackMarker","requestAnimationFrame","animate","nowMsec","lastTimeMsec","Math","min","render","update","React","Component","Boolean","location","hostname","match","ReactDOM","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"uPAGMA,EAAQC,EAAQ,GAChBC,EAAUD,EAAQ,IAGlBE,EAAG,kHAuEN,OAvEM,mCAEP,WAEE,IAAIC,EAAQ,IAAIJ,EAAMK,MAClBC,EAAS,IAAIN,EAAMO,kBAAmB,GAAIC,OAAOC,WAAaD,OAAOE,YAAa,GAAK,KAE3FJ,EAAOK,SAASC,EAAI,EAEpB,IAAIC,EAAW,IAAIb,EAAMc,cAAc,CAEvCC,OAAO,IAETF,EAASG,cAAc,IAAIhB,EAAMiB,MAAM,aAAc,GACnDJ,EAASK,QAASV,OAAOC,WAAYD,OAAOE,aAC5CG,EAASM,WAAWC,MAAMT,SAAW,WACvCE,EAASM,WAAWC,MAAMC,IAAM,MAChCR,EAASM,WAAWC,MAAME,KAAO,MAC/BC,SAASC,KAAKC,YAAaZ,EAASM,YAEpC,IAAIO,EAAc,IAAI1B,EAAM2B,MAC9BvB,EAAMwB,IAAIF,GAER,IAAIG,EAAS,IAAI3B,EAAQ4B,OAAO,CAAEjB,WAAUP,WA6C9C,OA3CEJ,EAAQ6B,WAAW,CAAEF,OAAQA,IAAUG,MAAK,SAACC,GACzC,IAIIC,EAJAC,EAAQ,IAAInC,EAAMoC,aAAa,UACnChC,EAAMwB,IAAIO,IAEY,IAAIE,KAGVC,KAAK,qBAAqB,SAAUC,IAChDL,EAAQK,EAAKnC,MAAMoC,SAAS,IACtB7B,SAAS8B,GAAK,GAUpBrC,EAAMwB,IAAKM,GACXR,EAAYE,IAAIM,GAChB,IACIQ,EAAgB,IAAIxC,EAAQyC,cAAc,CACxCC,WAFK,mBAGLC,aAAcnB,IAEpBO,EAAWa,YAAYJ,GAE3BK,uBAAsB,SAASC,EAAQC,GAEnC,IAAIC,EAAeA,GAAgBD,EAAQ,IAAK,GAChCE,KAAKC,IAAI,IAAKH,EAAUC,GACxCA,EAAeD,EACfpC,EAASwC,OAAQjD,EAAOE,GACxB2B,EAAWqB,OAAQzB,EAAOV,YAI1B4B,sBAAuBC,EACvB,GACN,GAEF,IAEF,uBAEA,KAAC,EAvEM,CAASO,IAAMC,WA0ETrD,ICrEKsD,QACW,cAA7BjD,OAAOkD,SAASC,UAEe,UAA7BnD,OAAOkD,SAASC,UAEhBnD,OAAOkD,SAASC,SAASC,MACvB,2DCZNC,IAASR,OAAO,cAAC,EAAG,IAAK9B,SAASuC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMjC,MAAK,SAAAkC,GACjCA,EAAaC,YACf,G","file":"static/js/main.a9edbd58.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\nimport { GLTFLoader } from \"three/examples/jsm/loaders/GLTFLoader\";\nconst THREE = require('three');\nconst THREEAR = require('threear');\n\n\nclass App extends React.Component {\n\n  render(){\n\n    var scene = new THREE.Scene();\n    var camera = new THREE.PerspectiveCamera( 75, window.innerWidth / window.innerHeight, 0.1, 1000 );\n\n    camera.position.z = 5;\n\n    var renderer = new THREE.WebGLRenderer({\n\t\t\t\t// antialias\t: true,\n\t\t\t\talpha: true\n\t\t\t});\n\t\trenderer.setClearColor(new THREE.Color('lightgrey'), 0)\n    renderer.setSize( window.innerWidth, window.innerHeight );\n    renderer.domElement.style.position = 'absolute'\n\t\trenderer.domElement.style.top = '0px'\n\t\trenderer.domElement.style.left = '0px'\n    document.body.appendChild( renderer.domElement );\n\n    var markerGroup = new THREE.Group();\n\t\tscene.add(markerGroup);\n\n    var source = new THREEAR.Source({ renderer, camera });\n\n    THREEAR.initialize({ source: source }).then((controller) => {\n        var light = new THREE.AmbientLight(0xffffff);\n        scene.add(light);\n\n        var threeGLTFLoader = new GLTFLoader();\n        var model;\n\n        threeGLTFLoader.load(\"./model/mech1.glb\", function (gltf) {\n            model = gltf.scene.children[0];\n            model.position.x = -0.5;\n            // model.position.y = -0.05;\n            // model.position.z = -0.05;\n            // model.scale.x = 5;\n            // model.scale.y = 5;\n            // model.scale.z = 5;\n            // var geometry = new THREE.BoxGeometry( 1, 1, 1 );\n            // var material = new THREE.MeshNormalMaterial();\n            // var cube = new THREE.Mesh( geometry, material );\n\n            scene.add( model );\n            markerGroup.add(model)\n            var path = './data/patt.hiro';\n            var patternMarker = new THREEAR.PatternMarker({\n                  patternUrl: path,\n                  markerObject: markerGroup\n                });\n            controller.trackMarker(patternMarker);\n\n        requestAnimationFrame(function animate(nowMsec){\n            // measure time\n            var lastTimeMsec = lastTimeMsec || nowMsec-1000/60;\n            var deltaMsec = Math.min(200, nowMsec - lastTimeMsec);\n            lastTimeMsec = nowMsec;\n            renderer.render( scene, camera );\n            controller.update( source.domElement );\n            // model.rotation.x += 0.01;\n            // model.rotation.y += 0.01;\n            // keep looping\n            requestAnimationFrame( animate );\n            });\n      });\n\n    });\n  return(\n  <div></div>\n  )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}